// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String      @id @default(cuid())
  airbnbId      String?     @unique @map("airbnb_id")
  name          String?
  username      String?     @unique
  email         String?     @unique
  emailVerified DateTime?   @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  reviews       Review[]
  roomScraps    RoomScrap[]
  host          Host?

  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @default(now()) @updatedAt @map("updated_at")
  reservations Reservation[]
  payments     Payment[]

  @@map("users")
}

model Account {
  id                       String   @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?  @db.Text
  access_token             String?  @map("access_token") @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?  @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User     @relation(fields: [userId], references: [id])
  createdAt                DateTime @default(now())
  updatedAt                DateTime @default(now()) @updatedAt @map("updated_at")

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@index([userId])
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Room {
  id             Int     @id @default(autoincrement())
  airbnbId       String? @unique @map("airbnb_id")
  airbnbLink     String? @unique @map("airbnb_link")
  title          String
  hostId         Int     @map("host_id")
  host           Host    @relation(fields: [hostId], references: [id])
  description    String? @db.Text
  seoTitle       String  @map("seo_title")
  seoDescription String? @map("seo_description") @db.Text
  thumbnail      String?
  location       String
  price          Int
  latitude       Decimal @db.Decimal(10, 6)
  longitude      Decimal @db.Decimal(10, 6)
  capacity       Int
  checkIn        String  @map("check_in")
  checkOut       String  @map("check_out")
  checkInType    String  @map("check_in_type")

  propertyType String @map("property_type")
  roomType     String @map("room_type")

  reviewsCount   Int   @default(0) @map("reviews_count")
  reviewsAverage Float @default(0) @map("reviews_average")

  status RoomStatus @default(COMPLETED)

  roomTags     RoomTag[]
  images       RoomImage[]
  reviews      Review[]
  rules        RoomRule[]
  amenities    RoomAmenity[]
  scraps       RoomScrap[]
  reservations Reservation[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("rooms")
}

enum RoomStatus {
  DRAFT
  IN_PROGRESS
  COMPLETED
}

model RoomImage {
  id          Int         @id @default(autoincrement())
  room        Room        @relation(fields: [roomId], references: [id])
  roomId      Int         @map("room_id")
  caption     String      @db.VarChar(1000)
  orientation Orientation
  imageLink   String      @map("image_link")

  @@map("room_images")
}

model Rule {
  id       Int    @id @default(autoincrement())
  category String
  title    String
  icon     String

  rules RoomRule[]

  @@map("rules")
}

model Amenity {
  id        Int     @id @default(autoincrement())
  category  String
  title     String
  subTitle  String? @map("sub_title")
  icon      String
  available Boolean

  amenities RoomAmenity[]

  @@index([icon])
  @@map("amenities")
}

model RoomRule {
  id     Int  @id @default(autoincrement())
  room   Room @relation(fields: [roomId], references: [id])
  roomId Int  @map("room_id")
  rule   Rule @relation(fields: [ruleId], references: [id])
  ruleId Int  @map("rule_id")

  @@unique([roomId, ruleId])
  @@map("room_rules")
}

model RoomAmenity {
  id Int @id @default(autoincrement())

  roomId    Int @map("room_id")
  amenityId Int @map("amenity_id")

  room    Room    @relation(fields: [roomId], references: [id])
  amenity Amenity @relation(fields: [amenityId], references: [id])

  @@unique([roomId, amenityId])
  @@map("room_amenities")
}

model Review {
  id Int @id @default(autoincrement())

  roomId        Int      @map("room_id")
  orderNumber   String?  @unique @map("order_number")
  userId        String   @map("user_id")
  airbnbId      String?  @unique @map("airbnb_id")
  accuracy      Int      @default(0)
  checkIn       Int      @default(0) @map("check_in")
  cleanliness   Int      @default(0)
  communication Int      @default(0)
  location      Int      @default(0)
  value         Int      @default(0)
  content       String?  @db.Text
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @default(now()) @updatedAt @map("updated_at")
  reservationId Int?

  room Room @relation(fields: [roomId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@map("reviews")
}

enum Orientation {
  PORTRAIT
  LANDSCAPE
}

model Host {
  id            Int      @id @default(autoincrement())
  userId        String   @unique @map("user_id")
  isSuperHost   Boolean  @default(false) @map("is_super_host")
  isVerified    Boolean  @default(false) @map("is_verified")
  hostStartedAt DateTime @default(now()) @map("host_started_at")

  about        String? @db.Text
  school       String?
  job          String?
  address      String?
  birth        String?
  favoriteSong String? @map("favorite_song")
  liked        String?
  interested   String?
  noTalented   String? @map("no_talented")
  bookTitle    String? @map("book_title")
  hobby        String?
  pet          String?

  reviewsCount   Int   @default(0) @map("reviews_count")
  reviewsAverage Float @default(0) @map("reviews_average")

  hostTags  HostTag[]
  user      User           @relation(fields: [userId], references: [id])
  rooms     Room[]
  languages HostLanguage[]

  @@map("hosts")
}

model HostLanguage {
  id         Int @id @default(autoincrement())
  hostId     Int @map("host_id")
  languageId Int @map("language_id")

  host     Host     @relation(fields: [hostId], references: [id])
  language Language @relation(fields: [languageId], references: [id])

  @@unique([hostId, languageId])
  @@map("host_languages")
}

model Language {
  id      Int    @id @default(autoincrement())
  content String @unique @db.VarChar(100)

  hosts HostLanguage[]

  @@map("languages")
}

model Tag {
  id        Int      @id @default(autoincrement())
  content   String   @unique @db.VarChar(100)
  createdAt DateTime @default(now()) @map("created_at")

  hostTags HostTag[]
  roomTags RoomTag[]

  @@map("tags")
}

model HostTag {
  id     Int @id @default(autoincrement())
  hostId Int @map("host_id")
  tagId  Int @map("tag_id")

  host Host @relation(fields: [hostId], references: [id])
  tag  Tag  @relation(fields: [tagId], references: [id])

  @@unique([hostId, tagId])
  @@map("host_tags")
}

model RoomTag {
  id     Int @id @default(autoincrement())
  roomId Int @map("room_id")
  tagId  Int @map("tag_id")

  room Room @relation(fields: [roomId], references: [id], onDelete: Cascade)
  tag  Tag  @relation(fields: [tagId], references: [id])

  @@unique([roomId, tagId])
  @@map("room_tags")
}

model RoomScrap {
  id     Int    @id @default(autoincrement())
  userId String @map("user_id")
  roomId Int    @map("room_id")

  user User @relation(fields: [userId], references: [id])
  room Room @relation(fields: [roomId], references: [id])

  @@unique([userId, roomId])
  @@map("room_scraps")
}

model Reservation {
  id          Int               @id @default(autoincrement())
  userId      String            @map("user_id")
  roomId      Int               @map("room_id")
  orderNumber String            @unique @map("order_number")
  checkIn     DateTime          @map("check_in")
  checkOut    DateTime          @map("check_out")
  guestNumber Int               @map("guest_number")
  days        Int
  totalPrice  Int               @map("total_price")
  status      ReservationStatus @default(PENDING)
  createdAt   DateTime          @default(now()) @map("created_at")
  updatedAt   DateTime          @default(now()) @updatedAt @map("updated_at")

  user    User     @relation(fields: [userId], references: [id])
  room    Room     @relation(fields: [roomId], references: [id])
  payment Payment?

  @@map("reservations")
}

model Payment {
  id Int @id @default(autoincrement())

  orderNumber String      @unique @map("order_number")
  reservation Reservation @relation(fields: [orderNumber], references: [orderNumber])
  userId      String      @map("user_id")
  user        User        @relation(fields: [userId], references: [id])

  // * portone 관련 정보 저장
  orderName     String        @map("order_name")
  transactionId String        @unique @map("transaction_id")
  status        PaymentStatus @default(PAY_PENDING)
  currency      String        @default("KRW")
  method        String

  // * 결제 정보
  amount     Int     @default(0)
  vat        Int     @default(0)
  paid       Int     @default(0)
  receiptUrl String? @map("receipt_url")

  paidAt          DateTime @map("paid_at")
  statusUpdatedAt DateTime @map("status_updated_at")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("payments")
}

enum PaymentStatus {
  CANCELLED
  FAILED
  PAID
  PARTIAL_CANCELLED
  PAY_PENDING
  READY
  VIRTUAL_ACCOUNT_ISSUED
}

enum ReservationStatus {
  PENDING
  PAYMENT
  CONFIRMED
  CANCELED
  COMPLETED
}
